"""
Rank all the model tests in the analysis directory.
"""

from glob import glob
from utils.constants import ANALYSIS_P, MAE, MSE, RESULTS_F
from utils.hdf_read_and_write import read_hdf
from utils.printing_and_logging import step_ri, title


def rank_analysis_dir_parser(subparsers):
    """
    Example commands:
        python3 main.py rank_analysis_dir test_random_50nm_gl \
            --filter gl_random_50nm_
    """
    subparser = subparsers.add_parser(
        'rank_analysis_dir',
        help='rank all model analyses',
    )
    subparser.set_defaults(main=rank_analysis_dir)
    subparser.add_argument(
        'testing_ds',
        help='name of the testing dataset',
    )
    subparser.add_argument(
        '--filter',
        help='partial string to filter analysis directories by',
    )
    subparser.add_argument(
        '--use-mae',
        action='store_true',
        help='use MAE instead of MSE',
    )


def rank_analysis_dir(cli_args):
    title('Model test script')

    step_ri('Error')
    use_mae = cli_args['use_mae']
    if use_mae:
        print('Using MAE')
    else:
        print('Using MSE')

    step_ri('Grabbing all potential analysis directories')
    testing_ds = cli_args['testing_ds']
    filter_str = cli_args['filter']
    if filter_str:
        print(f'Applying the filter `{filter_str}`')
    else:
        filter_str = ''
    dir_paths = glob(f'{ANALYSIS_P}/{testing_ds}/*{filter_str}*/{RESULTS_F}')
    print(f'Found a total of {len(dir_paths)}')

    step_ri('Looping through and grabbing HDF files')
    # 2D array with the columns of (error, tag and epoch)
    results = []
    for dir_path in dir_paths:
        # Read in the results generated by the `model_test` script
        data = read_hdf(dir_path)
        mae = data[MAE][()]
        mse = data[MSE][()]
        # Parse out the [tag].[epoch] portion of the path for the second value
        # results.append([mse if use_mse else mae, dir_path.split('/')[-2]])
        results.append([mae if use_mae else mse, dir_path.split('/')[-2]])

    step_ri('Sorting the rankings')
    sorted_results = sorted(results, key=lambda pair: pair[0])

    step_ri('Rankings')
    for idx, (error, tag_and_epoch) in enumerate(sorted_results):
        print(f'{idx + 1}.', tag_and_epoch, error)
